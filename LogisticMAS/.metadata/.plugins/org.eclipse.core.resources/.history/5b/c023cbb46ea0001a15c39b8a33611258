package autoMag.httpManager;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

import autoMag.shelves.ShelfUnit;
import autoMag.space.Coord;
import autoMag.transaction.Transaction;
import autoMag.utils.Decoders;
import autoMag.utils.TransactorInfo;
import jade.core.AID;

public class RequestListener {
	
	HashMap<AID, TransactorInfo> transactorsList;
	TreeMap<Coord, ShelfUnit> shelvesList;
	HashMap<Integer, Transaction> transactionsList;
	
	public RequestListener(HashMap<AID, TransactorInfo> transactors, TreeMap<Coord, ShelfUnit> shelves, HashMap<Integer, Transaction> transactions) {
		transactorsList = transactors;
		shelvesList = shelves;
		transactionsList = transactions;
	}

	public void run(String address, int port) throws IOException {
		HttpServer server = HttpServer.create(new InetSocketAddress(address, port), 0);
		server.createContext("/", new  MyHttpHandler(transactorsList, shelvesList, transactionsList));
		ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor)Executors.newFixedThreadPool(10);
		server.setExecutor(threadPoolExecutor);
		server.start();
		System.out.println("Server started on port "+server.getAddress().toString());
	}
	
	private class MyHttpHandler implements HttpHandler { 
		
		HashMap<AID, TransactorInfo> transactorsList;
		TreeMap<Coord, ShelfUnit> shelvesList;
		HashMap<Integer, Transaction> transactionsList;
		
		public MyHttpHandler(HashMap<AID, TransactorInfo> transactors, TreeMap<Coord, ShelfUnit> shelves, HashMap<Integer, Transaction> transactions) {
			transactorsList = transactors;
			shelvesList = shelves;
			transactionsList = transactions;
		}
		
		@Override    
		  public void handle(HttpExchange httpExchange) throws IOException {
			  if("POST".equals(httpExchange.getRequestMethod())) {
		  System.out.println("NEW POST REQUEST");
				  String requestParamValue = handlePostRequest(httpExchange); 
				  handleResponse(httpExchange,requestParamValue); 
			  }    
		  }
		  
		  private String handlePostRequest(HttpExchange httpExchange) {
			  try {
				  StringBuilder sb = new StringBuilder();
				  InputStream ios = httpExchange.getRequestBody();
				  int i;
				  while ((i = ios.read()) != -1) {
					  sb.append((char) i);
					  }
				  System.out.println("REQUEST: " + sb.toString());
		  //update infos
			  executeTransporterManagerUpdate(Decoders.parseTransporterManagerUpdate(sb.toString()));
			  return sb.toString();
		  } catch (IOException e) {
			  System.out.println("Richiesta non valida");
		  return "ERROR";
			  }
		  }
		
		  private void executeTransporterManagerUpdate(String[] updateMsg) {
			  
			if(updateMsg[0].equals("DELIVERED_TRANSACTOR")) {
				AID transactorAID = null;
				for (AID key : transactorsList.keySet()) {
					if(transactorsList.get(key).getCoord().getSector() == updateMsg[1]) {
						transactorAID = key;
					}
				}
				if(transactorAID != null) {
					transactorsList.get(transactorAID).setWareQuantity(transactorsList.get(transactorAID).getWareQuantity()+Integer.valueOf(updateMsg[2]));
				}
				else {
					System.out.println("ERROR: transactor not found");
				}
			}
			
			else if(updateMsg[0].equals("RETRIEVED_TRANSACTOR")) {
				AID transactorAID = null;
				for (AID key : transactorsList.keySet()) {
					if(transactorsList.get(key).getCoord().getSector() == updateMsg[1]) {
						transactorAID = key;
					}
				}
				if(transactorAID != null) {
					transactorsList.get(transactorAID).setWareQuantity(transactorsList.get(transactorAID).getWareQuantity()-Integer.valueOf(updateMsg[2]));
				}
				else {
					System.out.println("ERROR: transactor not found");
				}
			}
			
			else if(updateMsg[0].equals("DELIVERED_SHELF")) {
				shelvesList;
			}
			
			else if(updateMsg[0].equals("RETRIEVED_SHELF")) {
				Coord shelfUnitCoord = new Coord(updateMsg[2]);
				int[] levels = decodeShelfLevels(updateMsg[3]);
				for(int i=0; i<levels.length(); i++) {
					shelvesList.get(shelfUnitCoord).
				}
				
				
			}
			
			else {
				System.out.println("ERROR: wrong update type");
			}
		}
		
		private void handleResponse(HttpExchange httpExchange, String requestParamValue)  throws  IOException {
		
			  OutputStream outputStream = httpExchange.getResponseBody();
			  
			  String htmlResponse = "";
		  
		  if(requestParamValue == "ERROR"){
		  htmlResponse = "ERROR - "+requestParamValue;
		  }
		  else {
			  htmlResponse = "200 - "+requestParamValue;
			  }
			  
			  httpExchange.sendResponseHeaders(200, htmlResponse.length());
			  outputStream.write(htmlResponse.getBytes());
			  outputStream.flush();
			  outputStream.close();
		
		
		}
	}
}
